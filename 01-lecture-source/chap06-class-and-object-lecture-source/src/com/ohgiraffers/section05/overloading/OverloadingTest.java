package com.ohgiraffers.section05.overloading;

public class OverloadingTest {



/*main 없음*/
/*수업 목표 : 오버로딩에 대해 이해할 수 있다.*/

/*
 * 오버로딩의 사용 이유
 * >> 매개변수의 종류별로 메소드 내용을 다르게 작성해야 하는 경우들이 있다.
 *    이 때 동일한 기승의 메소들르 매개변수에 따라 다르게 이름을 정의하면
 *     복잡하고 관리가 어려우며 규모가 작은 프로그램은 정도가 덜하더라도 규모가 큰 경우
 *     관리가 더 어려워진다.
 * >>> 동일한 이름으로 다양한 종류의 매개변수에 따라 처리해야 하는 여러 메소드를
 *      동일한 이름으로 관리하기 위해 사용하는 기술 : 오버로딩.
 */

/*
 * 오버로딩의 조건
 *  > 동일 이름을 가진 메소드의 파라미터 선언부에 매개변수 타입, 개수, 순서를 다르게 작성하여
 * 한 클래스 내에서 동일한 이름의 메소드를 여러개 작성할 수 있도록 한다.
 * >> 메소드의 시그니처가 다르면 다른 메소드로 인식하기 때문.
 * >> 시그니처 중 메소드의 이름은 같아야 하기 때문에
 *    파라미터 선언부가 다르게 작성되어야 오버로딩이 성립된다.
 */


/* 메소드 시그니처*/
    /* public void method(int num){}이라는 메소드의 메소드명과 파라미터 선언부 부분 = 시그니처
     *
     * method(int num) >> 시그니처
     * 메소드 시그니처가 달라야 하기 때문에 접근제한자나 반환형은 오버로딩 성립 조건에 해당 x
     */

    //public  void test(){}   //에러 발생) : 접근제한자는 메소드 시그니처 해당 x



    //private void test(){}   //에러 발생 //

    //public void test(int no){}      //

    //public void test(int no2){}     //이름 바꿔도 시그니처 영향 x

    public void test(int no, int no2 ){}     //매개변수 개수에 따른 오버로딩 확인
    public void test(int no, String name ){}     //매개변수 타입에 따른 오버로딩 확인





}

