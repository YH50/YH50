package com.ohgiraffers.section01.extend;

public class Application {

    public static void main(String[] args) {
        /*
        * 상속에 대해서 이해할 수 있다.
        * 상속 : 현실 세계 상속과 유사한 개념
        * >> 부모가 가지고 있는 자산(자바에서는 클래스가 가지는 멤버)을 자식이 물려받는 의미.
        * 클래스 역시 부모 클래스와 자식 클래스로 역할을 나눠서 부모가 가지는 멤버를
        * 자식이 물려받아 자기의 멤버인 것 처럼 사용할 수 있도록 만든 기술임.
        *
        * 단순 물려받는 개념보다는 조금 더 나아가서 자바에서의 상속은
        * 부모 클래스의 확장(extend)의 개념임
        * >> 물려받고 자신의 것 처럼 사용 + 추가적인 멤버 역시 작성이 가능.
        * >> 메소드 재정의(오버라이딩)의 기술을 이용하여 부모가 가진 메소드를 재정의하는 것도 가능.
        * */

        /*
        *
        * 메소드 재정의 (오버라이딩)
        * >> 부모가 가지는 메소드 선언부를 그대로 사용하면서 자식 클래스가 정의한
        * 메소드 대로 동작하도록 구현, 몸체 부분을 새롭게 다시 작성하는 기술.
        * >> 메소드 재정의 식 메소드를 호출하게 되면 재정의한 메소드가 우선 동작이 된다.
        * */

        /*
        * 이러한 상속이라는 기술을 사용했을때 얻게 되는 이점 2가지.
        * 1. 새 클래스 작성 시 기존 클래스 재사용 가능
        * 1-1. 재사용 시 생산성 크게 향상 가능 (새로 쓰는거보다 더 빠름)
        * 1-2. 공통적으로 사용되는 코드가 부모 클래스에 존재하면 수정사항 발생 시
        * 부보 클래스만 수정해도 정적으로 적용됨.
        * 2. 클래스 간 계층관계 형성, 다형성의 문법적인 토대 가능
        * */

        /*상속의 단점?*/
        /*
        * 1. 부모 클래스의 기능을 추가/변경 시 자식클래스가 정상적으로 동작하는지 예측이 힘듦.
        *    상속 구조가 복잡해질 수록 그 영향에 대한 예측 hard, 유지보수성 up BUT 유지보수는 BAD
        * 2. 부모 클래스의 변경 hard.
        * 3. 부모 클래스에선 쓸모있던 기능이 자식 클래스에선 의미없을 수도 있다.*/

        /*
        * 장점 vs 단점 >>
        * 상속 : 재사용이라는 장점만 보게 되면 오용의 가능성
        *> >* 유지보수에 좋지 않은 코드를 작성할 확률이 높음
        상속 : IS-A 관계로 구분될 경우에만 사용해야 함.
        * /

        * 객체 지향 설계 관점에서 바라보는 상속
        *  모든 객체는 자신이 수신한 메시지에 대한 응답을 해야한다는 책임을 가지고
        *  그 책임의 사이즈는 적당히 커야 한다.
        * 적절한 책임을 가진 갳게들이 서로 협력을 통해
        *    프로그램이 동작하는 것을 "객체 지향 프로그램" 이라 함./
        *
         */

        /*
        * 적절한 책임을 수행하는 객체 또한 그 객체만 수행할 수 있는 기능이라기보단 역할의 관점으로 바라봐야 함.
        * >>역할 : 동일한 동작을 수행하는 것을 정의한 것, 즉 대체가능성 의미.
        * 부모 클래스를 추상화하는 경우 역할의 관점으로 바라봐야 한다.
        * >> 그래야 자식클래스로 생성된 객체들이 서로 역할을 수행해가며 유연한 코드를 작성할 수 있게됨.
        * >> 동일 역할을 가지는 모든 객체는 동일 메시지를 받긴 하나
        *       객체별로 그 메시지에 응답하는 방식이 서로 다를 수 있다.
        * */

        Car car = new Car();
        car.soundHorn();
        car.run();
        car.soundHorn();
        car.stop();

        FireTruck fireTruck = new FireTruck();
        fireTruck.soundHorn();
        fireTruck.run();
        fireTruck.soundHorn();
        fireTruck.stop();
        fireTruck.sprayWater();


        RacingCar racingCar = new RacingCar();
        racingCar.soundHorn();
        racingCar.run();
        racingCar.soundHorn();
        racingCar.stop();



    }
}
